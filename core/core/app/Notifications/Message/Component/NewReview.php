<?php

namespace App\Notifications\Message\Component;

use App\Domain\Contract;

class NewReview implements Contract\Notifications\Message\Component\NewReview
{
	/**
	 * @var string
	 */
	private $title;

	/**
	 * @var string
	 */
	private $author;

	/**
	 * @var string
	 */
	private $branch;

	/**
	 * @var string
	 */
	private $description;

	/**
	 * @var int
	 */
	private $totalDiscussionsCount;

	/**
	 * @var int
	 */
	private $resolvedDiscussionsCount;

	/**
	 * @var bool
	 */
	private $isReadyToClose = false;

	/**
	 * @var Object\ReviewRecipient[]
	 */
	private $recipients = [];

	/**
	 * @var string[]
	 */
	private $suggestedReviewers = [];

	public function setTitle(string $title): Contract\Notifications\Message\Component\NewReview
	{
		$this->title = $title;
		return $this;
	}

	public function setAuthor(string $author): Contract\Notifications\Message\Component\Review
	{
		$this->author = $author;
		return $this;
	}

	public function setBranch(string $branch): Contract\Notifications\Message\Component\Review

	{
		$this->branch = $branch;
		return $this;
	}

	public function setDescription(string $description): Contract\Notifications\Message\Component\NewReview
	{
		$this->description = $description;
		return $this;
	}

	public function setTotalDiscussionsCount(int $totalDiscussionsCount): Contract\Notifications\Message\Component\NewReview
	{
		$this->totalDiscussionsCount = $totalDiscussionsCount;
		return $this;
	}

	public function setResolvedDiscussionsCount(int $resolvedDiscussionsCount): Contract\Notifications\Message\Component\NewReview
	{
		$this->resolvedDiscussionsCount = $resolvedDiscussionsCount;
		return $this;
	}

	public function setIsReadyToClose(bool $isReadyToClose): Contract\Notifications\Message\Component\NewReview
	{
		$this->isReadyToClose = $isReadyToClose;
		return $this;
	}

	public function addRecipient(string $name, int $state): Contract\Notifications\Message\Component\NewReview
	{
		$this->recipients[] = new Object\ReviewRecipient($name, $state);
		return $this;
	}

	public function addSuggestedReviewer(string $suggestedReviewer): Contract\Notifications\Message\Component\NewReview
	{
		$this->suggestedReviewers[] = $suggestedReviewer;
		return $this;
	}

	public function toString(): string
	{
		return $this->__toString();
	}

	public function __toString()
	{
		$result = sprintf(
			"%s\nüë®‚Äçüíª %s\n„ÄΩÔ∏è %s\n\nüóí %s\n\nüí¨ %s/%s\n\n",
			$this->title ?? '',
			$this->author ?? '–ù–µ—Ç –∞–≤—Ç–æ—Ä–∞',
			$this->branch ?? '–ù–µ—Ç –≤–µ—Ç–∫–∏',
			$this->description ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
			$this->totalDiscussionsCount ?? 0,
			$this->resolvedDiscussionsCount ?? 0
		);

		foreach ($this->recipients as $recipient) {
			$result .= sprintf("üëÅ‚Äçüó® %s\n", $recipient);
		}

		if (!empty($this->suggestedReviewers)) {
			$result .= "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ä–µ–≤—å—é–≤–µ—Ä—ã:\n";
			foreach ($this->suggestedReviewers as $suggestedReviewer) {
				$result .= sprintf("%s\n", $suggestedReviewer);
			}
		}

		$result .= $this->isReadyToClose ? '–ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å' : '–ù—É–∂–Ω–æ –¥–æ–±–∏—Ç—å';

		return $result;
	}
}